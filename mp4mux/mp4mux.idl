////////////////////////////////////////////////////////////
// Copyright (c) GDCL 2004-6. All Rights Reserved. 
// You are free to re-use this as the basis for your own filter development,
// provided you retain this copyright notice in the source.
// http://www.gdcl.co.uk
// 
// Enhancements by Roman Ryltsov roman@alax.info, 2013-2015

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(01C87765-FA54-45C5-ABB4-3C748246AE77),
	version(1.0),
]
library GdclMp4Mux
{
	importlib("stdole2.tlb");
	[
		object,
		uuid(B583CDE8-2E32-468A-AA60-36D20C8628A1),
		//dual,
		//oleautomation,
		nonextensible,
		pointer_default(unique)
	]
	interface IMuxMemAllocator : IUnknown
	{
		HRESULT GetMinimalBufferCount([out] LONG* pnMinimalBufferCount);
		HRESULT SetMinimalBufferCount([in] LONG nMinimalBufferCount);
	};
	[
		object,
		uuid(51613985-D540-435B-BEBC-68D25243E239),
		//dual,
		//oleautomation,
		nonextensible,
		pointer_default(unique)
	]
	interface IMuxInputPin : IUnknown
	{
		HRESULT GetMemAllocators([out] IUnknown** ppMemAllocatorUnknown, [out] IUnknown** ppCopyMemAllocatorUnknown);
		HRESULT SetMaximalCopyMemAllocatorCapacity([in] ULONG nCapacity);
	};
	[
		object,
		uuid(6CE45967-F228-4F7B-8B93-83DC599618CA),
		nonextensible,
		pointer_default(unique)
	]
	interface IMuxFilter : IUnknown
	{
		HRESULT IsTemporaryIndexFileEnabled();
		HRESULT SetTemporaryIndexFileEnabled([in] BOOL TemporaryIndexFileEnabled);
		HRESULT GetAlignTrackStartTimeDisabled();
		HRESULT SetAlignTrackStartTimeDisabled([in] BOOL bAlignTrackStartTimeDisabled);
		HRESULT GetMinimalMovieDuration([out] LONGLONG* pnMinimalMovieDuration);
		HRESULT SetMinimalMovieDuration([in] LONGLONG nMinimalMovieDuration);
		HRESULT SetComment([in] BSTR Comment);
		HRESULT SetTemporaryIndexFileDirectory([in] BSTR TemporaryIndexFileDirectory);
		HRESULT SetCombineOutputCapacity([in] ULONG CombineOutputCapacity);
		#if !defined(NDEBUG) || defined(DEVELOPMENT)
			HRESULT SetSkipClose([in] BOOL SkipClose);
		#endif
	};
	[
		uuid(5FD85181-E542-4e52-8D9D-5D613C30131B)
	]
	coclass MuxFilter
	{
		[default] interface IMuxFilter;
	};
	[
		object,
		uuid(3DB13CCE-05D7-4C98-B0E6-C9AC45F20307),
		nonextensible,
		pointer_default(unique)
	]
	interface IMuxFilterRecoverySite : IUnknown
	{
		HRESULT AfterStart();
		HRESULT BeforeStop();
		HRESULT Progress([in] DOUBLE Progress);
	};
	[
		object,
		uuid(29872F46-01FE-49C4-9E56-6C582D4531F9),
		nonextensible,
		pointer_default(unique)
	]
	interface IMuxFilterRecovery : IUnknown
	{
		HRESULT Initialize([in] IMuxFilterRecoverySite* Site, [in] BSTR Path, [in] BSTR TemporaryIndexFileDirectory);
		HRESULT Needed([out, retval] BOOL* Needed);
		HRESULT Active([out, retval] BOOL* Active);
		HRESULT Start();
		HRESULT Stop();
		HRESULT Progress([out, retval] DOUBLE* Progress);
	};
	[
		uuid(73D9D53D-30A3-451E-976A-2B4186FE27EC)
	]
	coclass MuxFilterRecovery
	{
		[default] interface IMuxFilterRecovery;
	};
};
